labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2011-01-01")),
xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
#annotate("text", x = ymd("2011-10-01"), y = 7800,
#         color = palette_light()[[1]], label = "Train Region") +
#annotate("text", x = ymd("2012-10-01"), y = 1550,
#         color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(#xmin = as.numeric(ymd("2011-01-01")),
#xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
#annotate("text", x = ymd("2011-10-01"), y = 7800,
#         color = palette_light()[[1]], label = "Train Region") +
#annotate("text", x = ymd("2012-10-01"), y = 1550,
#         color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = 0,#as.numeric(ymd("2011-01-01")),
xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
#annotate("text", x = ymd("2011-10-01"), y = 7800,
#         color = palette_light()[[1]], label = "Train Region") +
#annotate("text", x = ymd("2012-10-01"), y = 1550,
#         color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = 0,#as.numeric(ymd("2011-01-01")),
xmax = 5000 #as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
#annotate("text", x = ymd("2011-10-01"), y = 7800,
#         color = palette_light()[[1]], label = "Train Region") +
#annotate("text", x = ymd("2012-10-01"), y = 1550,
#         color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = 0,#as.numeric(ymd("2011-01-01")),
xmax = 5000, #as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
#annotate("text", x = ymd("2011-10-01"), y = 7800,
#         color = palette_light()[[1]], label = "Train Region") +
#annotate("text", x = ymd("2012-10-01"), y = 1550,
#         color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2011-01-01")),
xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
annotate("text", x = ymd("2012-10-01"), y = 7800,
color = palette_light()[[1]], label = "Train Region") +
annotate("text", x = ymd("2013-10-01"), y = 1550,
color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
ggplot(all_years)
ggplot(all_years)
library(tidyverse)
library(tidyquant)
library(timetk)
library(broom)
ggplot(all_years)
View(all_years)
ggplot2(all_years)
# Select date and count
bikes <- bikes %>%
select(dteday, cnt) %>%
rename(date = dteday)
# Select date and count
all_years <- all_years %>%
select(datetime, cnt) %>%
rename(date = datetime)
# Read
bikes <- read_csv("/Users/imbottlebird/Course/3.15.774/1.HW/Final_project/R/day.csv")
all_years <- read_csv("/Users/imbottlebird/Course/3.15.774/1.HW/Final_project/R/2012-2015.csv")
# Select date and count
bikes <- bikes %>%
select(dteday, cnt) %>%
rename(date = dteday)
# Select date and count
all_years <- all_years %>%
select(datetime, cnt) %>%
rename(date = datetime)
#3 years forecast with actual data
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2012-07-01")),
xmax = as.numeric(ymd("2015-01-01")),
ymin = 0, ymax = 14000,
fill = palette_light()[[4]], alpha = 0.01) +
geom_rect(xmin = as.numeric(ymd("2013-01-01")),
xmax = as.numeric(ymd("2015-12-31")),
ymin = 0, ymax = 14000,
fill = palette_light()[[4]], alpha = 0.01) +
annotate("text", x = ymd("2011-10-01"), y = 7800,
color = palette_light()[[1]], label = "Train Region") +
annotate("text", x = ymd("2012-10-01"), y = 1550,
color = palette_light()[[1]], label = "Test Region") +
annotate("text", x = ymd("2014-6-30"), y = 1550,
color = palette_light()[[1]], label = "Forecast Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
geom_point(aes(x = date, y = cnt), data = bikes_future,
alpha = 0.5, color = palette_light()[[2]]) +
geom_smooth(aes(x = date, y = cnt), data = bikes_future,
method = 'loess') +
labs(title = "Bikes Sharing Dataset: 3-Years Forecast", x = "") +
theme_tq()
#3 years forecast with actual data
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2012-07-01")),
xmax = as.numeric(ymd("2013-01-01")),
ymin = 0, ymax = 14000,
fill = palette_light()[[4]], alpha = 0.01) +
geom_rect(xmin = as.numeric(ymd("2013-01-01")),
xmax = as.numeric(ymd("2015-12-31")),
ymin = 0, ymax = 14000,
fill = palette_light()[[4]], alpha = 0.01) +
annotate("text", x = ymd("2011-10-01"), y = 7800,
color = palette_light()[[1]], label = "Train Region") +
annotate("text", x = ymd("2012-10-01"), y = 1550,
color = palette_light()[[1]], label = "Test Region") +
annotate("text", x = ymd("2014-6-30"), y = 1550,
color = palette_light()[[1]], label = "Forecast Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
geom_point(aes(x = date, y = cnt), data = bikes_future,
alpha = 0.5, color = palette_light()[[2]]) +
geom_smooth(aes(x = date, y = cnt), data = bikes_future,
method = 'loess') +
labs(title = "Bikes Sharing Dataset: 3-Years Forecast", x = "") +
theme_tq()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2011-01-01")),
xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
ggplot(all_years, aes(displ, hwy)) + geom_point()
ggplot(all_years, aes(x=date, y=cnt)) + geom_point()
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2013-01-01")),
xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
all_years <- read_csv("/Users/imbottlebird/Course/3.15.774/1.HW/Final_project/R/2014-2015.csv")
# Select date and count
all_years <- all_years %>%
select(datetime, cnt) %>%
rename(date = datetime)
ggplot(all_years)
# Visualize data and training/testing regions
all_years %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2013-01-01")),
xmax = as.numeric(ymd("2014-12-31")),
ymin = 0, ymax = 50000,
fill = palette_light()[[4]], alpha = 0.01) +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Read
bikes <- read_csv("/Users/imbottlebird/Course/3.15.774/1.HW/Final_project/R/day.csv")
# Select date and count
bikes <- bikes %>%
select(dteday, cnt) %>%
rename(date = dteday)
# Visualize data and training/testing regions
bikes %>%
ggplot(aes(x = date, y = cnt)) +
geom_rect(xmin = as.numeric(ymd("2012-07-01")),
xmax = as.numeric(ymd("2013-01-01")),
ymin = 0, ymax = 10000,
fill = palette_light()[[4]], alpha = 0.01) +
annotate("text", x = ymd("2011-10-01"), y = 7800,
color = palette_light()[[1]], label = "Train Region") +
annotate("text", x = ymd("2012-10-01"), y = 1550,
color = palette_light()[[1]], label = "Test Region") +
geom_point(alpha = 0.5, color = palette_light()[[1]]) +
labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
theme_tq()
# Split into training and test sets
train <- bikes %>%
filter(date < ymd("2012-07-01"))
test <- bikes %>%
filter(date >= ymd("2012-07-01"))
# Add time series signature
train_augmented <- train %>%
tk_augment_timeseries_signature()
train_augmented
# Model using the augmented features
fit_lm <- lm(cnt ~ ., data = train_augmented)
# Visualize the residuals of training set
fit_lm %>%
augment() %>%
ggplot(aes(x = date, y = .resid)) +
geom_hline(yintercept = 0, color = "red") +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
theme_tq() +
labs(title = "Training Set: lm() Model Residuals", x = "") +
scale_y_continuous(limits = c(-5000, 5000))
# RMSE
sqrt(mean(fit_lm$residuals^2))
test_augmented <- test %>%
tk_augment_timeseries_signature()
test_augmented
yhat_test <- predict(fit_lm, newdata = test_augmented)
pred_test <- test %>%
add_column(yhat = yhat_test) %>%
mutate(.resid = cnt - yhat)
# Split into training and test sets
train <- bikes %>%
filter(date < ymd("2012-07-01"))
train
# Add time series signature
train_augmented <- train %>%
tk_augment_timeseries_signature()
train_augmented
# Visualize the residuals of training set
fit_lm %>%
augment() %>%
ggplot(aes(x = date, y = .resid)) +
geom_hline(yintercept = 0, color = "red") +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
theme_tq() +
labs(title = "Training Set: lm() Model Residuals", x = "") +
scale_y_continuous(limits = c(-5000, 5000))
summary(fit_lm)
test_augmented
library(dplyr)
setwd("~/1. MIT Courses/2020-Spring/Analytics Edge/HW/15071/HW4")
data = read.csv("returns.csv")
returns = data[,3:122]
# Problem 2a
summary(data$Industry)
# Problem 2a
summary(data$Industry)
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[1,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Consumer Discretionary")
head(returns)
summary(returns)
summary(data)
head(data)
# Problem 2a
summary(data$Industry)
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[2,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Consumer Staples")
plot(t(industry[3,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Energy")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[4,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Financials")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[5,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Health Care")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[6,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Industrials")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[7,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Information Technology")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[8,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Materials")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[9,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Telecommunications Services")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[10,][2:121]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Utilities")
data$avg200801
match(c(avg200801),data)
match(c(avg200801),data)
match(avg200801,data)
grep("avg200801",colnames(data))
grep("avg200801","avg200812",colnames(data))
grep("avg200801avg200812",colnames(data))
grep("avg200801 avg200812",colnames(data))
grep("avg200812",colnames(data))
plot(t(industry[10,][25:36]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
grep("avg200812",colnames(data))
grep("avg201012",colnames(data))
grep("avg200801",colnames(data))
industry = aggregate(.~Industry, data=data, mean)[-2]
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[1,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Consumer Discretionary")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[2,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Consumer Staples")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[1,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Consumer Discretionary")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[2,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Consumer Staples")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[3,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Energy")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[4,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Financials")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[5,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Health Care")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[6,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Industrials")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[7,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Information Technology")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[8,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Materials")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[9,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Telecommunications Services")
industry = aggregate(.~Industry, data=data, mean)[-2]
plot(t(industry[10,][25:60]), type="l", ylim=c(-0.3, 0.3),
xlab = "Month", ylab="Average Return %")
title("Utilities")
# Problem 2b
d = dist(returns)
mod.hclust = hclust(d, method="ward.D2") # Hierarchical Clustering
plot(mod.hclust, labels=F, xlab="", ylab="Dissimilarity", sub="") # Dendrogram
dissim.hc = data.frame(k=seq_along(mod.hclust$height), dissimilarity=rev(mod.hclust$height))
plot(dissim.hc$k, dissim.hc$dissimilarity, type="l", xlim=c(0,30),
xlab="Number of Clusters", ylab="Dissimilarity")
# Problem 2b
d = dist(returns)
mod.hclust = hclust(d, method="ward.D2") # Hierarchical Clustering
plot(mod.hclust, labels=F, xlab="", ylab="Dissimilarity", sub="") # Dendrogram
dissim.hc = data.frame(k=seq_along(mod.hclust$height), dissimilarity=rev(mod.hclust$height))
plot(dissim.hc$k, dissim.hc$dissimilarity, type="l", xlim=c(0,30),
xlab="Number of Clusters", ylab="Dissimilarity")
# Problem 2c
h.clusters = cutree(mod.hclust, 7)
h.cluster.result = data.frame(h.clusters)
data.h = data.frame(data$Industry)
data.h$cluster = as.factor(h.cluster.result$h.clusters)
data.h
result = aggregate(returns, by=list(h.clusters), mean) %>% select(-Group.1)
result
# Problem 2c
h.clusters = cutree(mod.hclust, 7)
h.cluster.result = data.frame(h.clusters)
data.h = data.frame(data$Industry)
data.h$cluster = as.factor(h.cluster.result$h.clusters)
data.h
result = aggregate(returns, by=list(h.clusters), mean) %>% select(-Group.1)
result
table(h.clusters)
km = kmeans(returns, centers=7, iter.max=100)
km.clusters = km$cluster
km.cluster.result = data.frame(km.clusters)
data.km = data.frame(data$Industry)
data.km$cluster = as.factor(km.cluster.result$km.clusters)
data.km
names(km)
km.centroids = km$centers
km$tot.withinss
km.size = km$size
km.size
table(h.clusters, km.clusters)
#Forward stepwise selection with 10-fold cross-validation
fs <- train(Salary~.,train,
methods = "leapForward",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(.nvmax=seq(1,15)))
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages(("caret"))
library(caret)
hitters_raw <- read.csv("Hitters.csv")
hitters_num <-hitters_raw[,2:18]
#Normalize and split data
pp <- preProcess(hitters_raw, method=c("center", "scale"))
Hitters <- predict(pp, hitters_raw)
set.seed(15071)
setwd("~/1. MIT Courses/2020-Spring/Analytics Edge/HW/HW5")
hitters_raw <- read.csv("Hitters.csv")
hitters_num <-hitters_raw[,2:18]
ggcorrplot(round(cor(hitters_num),1), method="circle")
round(cor(hitters_num),1)
#Normalize and split data
pp <- preProcess(hitters_raw, method=c("center", "scale"))
Hitters <- predict(pp, hitters_raw)
set.seed(15071)
train.obs <- sort(sample(seq_len(nrow(Hitters)), 0.7*nrow(Hitters)))
train <- Hitters[train.obs,2:21]
test <- Hitters[-train.obs,2:21]
#Forward stepwise selection with 10-fold cross-validation
fs <- train(Salary~.,train,
methods = "leapForward",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(.nvmax=seq(1,15)))
library(rpart)
library(rpart.plot)
library(randomForest)
#Forward stepwise selection with 10-fold cross-validation
fs <- train(Salary~.,train,
methods = "leapForward",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(.nvmax=seq(1,15)))
xgboost)
#XGBOOST
library(xgboost)
set.seed(1)
cv.xgb <- train(y = train$Salary,
x = data.matrix(subset(diabetes.train, select=-c(Salary))),
method = "xgbTree",
trControl = trainControl(method="cv", number=5))
cv.xgb <- train(y = train$Salary,
x = data.matrix(subset(train, select=-c(Salary))),
method = "xgbTree",
trControl = trainControl(method="cv", number=5))
# The out-of-sample R2 is 0.499:
model.xgb <- cv.xgb$finalModel
preds.xgb <- predict(model.xgb, newdata = data.matrix(subset(test, select=-c(Salary))))
osr.xgb <- 1 - sum((preds.xgb - test$Salary)^2)/sum((mean(train$Salary) - test$Salary)^2)
osr.xgb
# By looking at the results and the best parameters,
# we can see what parameters are available to tune and if there is further tuning necessary.
cv.xgb$results
cv.xgb$bestTune
summary(model.xgb)
R2.xgb <- 1-sum((pred.xgb-train$Salary)^2)/sum((mean(train$Salary)-train$Salary)^2)
R2.xgb <- 1-sum((preds.xgb-train$Salary)^2)/sum((mean(train$Salary)-train$Salary)^2)
r.xgb <- 1-sum((preds.xgb-train$Salary)^2)/sum((mean(train$Salary)-train$Salary)^2)
r.xgb <- 1-sum((preds.xgb - train$Salary)^2)/sum((mean(train$Salary)-train$Salary)^2)
preds.xgb.test <- predict(model.xgb, newdata = data.matrix(subset(test, select=-c(Salary))))
preds.xgb.train <- predict(model.xgb, newdata = data.matrix(subset(train, select=-c(Salary))))
r.xgb <- 1-sum((preds.xgb.train - train$Salary)^2)/sum((mean(train$Salary)-train$Salary)^2)
osr.xgb <- 1 - sum((preds.xgb.test - test$Salary)^2)/sum((mean(train$Salary) - test$Salary)^2)
r.xgb
osr.xgb
# By looking at the results and the best parameters,
# we can see what parameters are available to tune and if there is further tuning necessary.
cv.xgb$results
cv.xgb$bestTune
r.xgb
b
r.xgb
osr.xgb
#Forward stepwise selection with 10-fold cross-validation
fs <- train(Salary~.,train,
methods = "leapForward",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(.nvmax=seq(1,15)))
